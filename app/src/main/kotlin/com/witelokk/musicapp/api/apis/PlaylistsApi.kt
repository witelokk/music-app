/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.witelokk.musicapp.api.apis

import com.witelokk.musicapp.api.models.ComwitelokkmusicmodelsAddSongToPlaylistRequest
import com.witelokk.musicapp.api.models.ComwitelokkmusicmodelsCreatePlaylistRequest
import com.witelokk.musicapp.api.models.ComwitelokkmusicmodelsCreatePlaylistResponse
import com.witelokk.musicapp.api.models.ComwitelokkmusicmodelsFailureResponse
import com.witelokk.musicapp.api.models.ComwitelokkmusicmodelsPlaylist
import com.witelokk.musicapp.api.models.ComwitelokkmusicmodelsRemoveSongFromPlaylistRequest
import com.witelokk.musicapp.api.models.ComwitelokkmusicmodelsShortPlaylists
import com.witelokk.musicapp.api.models.ComwitelokkmusicmodelsSongs
import com.witelokk.musicapp.api.models.ComwitelokkmusicmodelsUpdatePlaylistRequest

import com.witelokk.musicapp.api.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class PlaylistsApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * 
        * Get a list of playlists
         * @return ComwitelokkmusicmodelsShortPlaylists
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun playlistsGet(): HttpResponse<ComwitelokkmusicmodelsShortPlaylists> {

            val localVariableAuthNames = listOf<String>("Authorization")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/playlists",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * Delete a playlist
         * @param id Playlist ID 
         * @return void
        */
        open suspend fun playlistsIdDelete(id: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("Authorization")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/playlists/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * Get playlist by ID
         * @param id Playlist ID 
         * @return ComwitelokkmusicmodelsPlaylist
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun playlistsIdGet(id: kotlin.String): HttpResponse<ComwitelokkmusicmodelsPlaylist> {

            val localVariableAuthNames = listOf<String>("Authorization")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/playlists/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * Update a playlist
         * @param id Playlist ID 
         * @param comwitelokkmusicmodelsUpdatePlaylistRequest  (optional)
         * @return void
        */
        open suspend fun playlistsIdPut(id: kotlin.String, comwitelokkmusicmodelsUpdatePlaylistRequest: ComwitelokkmusicmodelsUpdatePlaylistRequest?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("Authorization")

            val localVariableBody = comwitelokkmusicmodelsUpdatePlaylistRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/playlists/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * Remove song from playlist
         * @param id Playlist ID 
         * @param comwitelokkmusicmodelsRemoveSongFromPlaylistRequest  (optional)
         * @return void
        */
        open suspend fun playlistsIdSongsDelete(id: kotlin.String, comwitelokkmusicmodelsRemoveSongFromPlaylistRequest: ComwitelokkmusicmodelsRemoveSongFromPlaylistRequest?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("Authorization")

            val localVariableBody = comwitelokkmusicmodelsRemoveSongFromPlaylistRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/playlists/{id}/songs".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * Get playlist songs
         * @param id Playlist ID 
         * @return ComwitelokkmusicmodelsSongs
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun playlistsIdSongsGet(id: kotlin.String): HttpResponse<ComwitelokkmusicmodelsSongs> {

            val localVariableAuthNames = listOf<String>("Authorization")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/playlists/{id}/songs".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * Add song to playlist
         * @param id Playlist ID 
         * @param comwitelokkmusicmodelsAddSongToPlaylistRequest  (optional)
         * @return void
        */
        open suspend fun playlistsIdSongsPost(id: kotlin.String, comwitelokkmusicmodelsAddSongToPlaylistRequest: ComwitelokkmusicmodelsAddSongToPlaylistRequest?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("Authorization")

            val localVariableBody = comwitelokkmusicmodelsAddSongToPlaylistRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/playlists/{id}/songs".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * Create a new playlist
         * @param comwitelokkmusicmodelsCreatePlaylistRequest  (optional)
         * @return ComwitelokkmusicmodelsCreatePlaylistResponse
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun playlistsPost(comwitelokkmusicmodelsCreatePlaylistRequest: ComwitelokkmusicmodelsCreatePlaylistRequest?): HttpResponse<ComwitelokkmusicmodelsCreatePlaylistResponse> {

            val localVariableAuthNames = listOf<String>("Authorization")

            val localVariableBody = comwitelokkmusicmodelsCreatePlaylistRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/playlists",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
